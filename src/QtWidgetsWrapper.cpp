// 
// This code has been automatically generated by RaQt_maker V0.0.1.
// 
// Rather than manually modify this file, it should be preferable to
// 
//     - 1) Modify the source files available here:
//         https://github.com/yguillemot/RaQt_maker.git
// 
//     - 2) Regenerate the whole code.
// 



#include <QtWidgets>

#include <iostream>
#include <string.h>
#include <stdint.h>

#include "QtWidgetsWrapper.hpp"



// Only for debug
#include <stdio.h>
FILE * connectLog;


QMap<QString, QtSignal * > * signalDict = 0;
QMap<QString, QString> * slotDict = 0;

void (*slotCallback)(int objId, char *slotName) = 0;
void (*slotCallbackInt)(int objId, char *slotName, STD_INT i) = 0;
void (*slotCallbackInt2)(int objId, char *slotName, STD_INT i1, STD_INT i2) = 0;
void (*slotCallbackStr)(int objId, char *slotName, char *s) = 0;
void (*slotCallbackIntStr)(int objId, char *slotName, STD_INT i, char *s) = 0;
void (*slotCallbackBool)(int objId, char *slotName, uchar b) = 0;
void (*slotCallbackPointer)(int objId, char *slotName, void *p) = 0;

void (*slotCallbackQEvent)
    (int32_t objId, const char *slotName, QEvent* event) = 0;

void (*slotCallbackQMouseEvent)
    (int32_t objId, const char *slotName, QMouseEvent* event) = 0;

void (*slotCallbackQPaintEvent)
    (int32_t objId, const char *slotName, QPaintEvent* event) = 0;



void (*slotCallbackComplexSig)(int32_t objId, char *slotName, uint32_t dataId) = 0;



// Conversion routines

char * toStdStr(QString qs)
{
    return qs.toLocal8Bit().data();
}





// Qt emit wrappers

// Possible simplification using QMetaObject::invokeMethod() ???????


void emit_QWSignal_(QWConnectorE * obj) {
// std::cout << "emit_QWSignal  obj = " << obj << "\n";

   obj->emit_QWSignal();    
}
    
void emit_QWSignal_int(QWConnectorE * obj, int v) {
// std::cout << "emit_QWSignal_int  obj = " << obj << "   v = " << v << "\n";

   obj->emit_QWSignal(v);    
}

void emit_QWSignal_bool(QWConnectorE * obj, bool b) {
// std::cout << "emit_QWSignal_bool  obj = " << obj << "   b = " << b << "\n";

   obj->emit_QWSignal(b);
}

void emit_QWSignal_str(QWConnectorE * obj, QString s) {
// std::cout << "emit_QWSignal_str  obj = " << obj << "   s = "
//                         << s.toLocal8Bit().data() << "\n";

   obj->emit_QWSignal(s);
}

void * QWApplicationCtor(int argc, char **argv)
{
    // Copie dans variables statiques (argc et argv ne seront vraiment
    // utilis√©s qu'au premier appel de QWidget::show())
    static int cc = argc;
    static char ** vv;
    vv = new char * [cc];
    for (int i=0; i<cc; i++) {
        int size = strlen(argv[i]);
        vv[i] = new char[size+1];
        strcpy(vv[i], argv[i]);
    }

    // Create Qt standard signals dictionnary
    signalDict = new QMap<QString, QtSignal * >;
    signalDict->clear();

    signalDict->insert("QWLocalToLocalSignal(int)",
        new QtSignal(SIGNAL(QWLocalToLocalSignal(int)),
                       (void *)emit_QWSignal_int));
    
    signalDict->insert("QWSignal()",
        new QtSignal(SIGNAL(QWSignal()),
                       (void *)emit_QWSignal_));
    signalDict->insert("QWSignal(int)",
        new QtSignal(SIGNAL(QWSignal(int)),
                       (void *)emit_QWSignal_int));
    signalDict->insert("QWSignal(bool)",
        new QtSignal(SIGNAL(QWSignal(bool)),
                       (void *)emit_QWSignal_bool));
    signalDict->insert("QWSignal(QString)",
        new QtSignal(SIGNAL(QWSignal(const QString)),
                       (void *)emit_QWSignal_str));

    signalDict->insert("pressed()",
        new QtSignal(SIGNAL(pressed()), nullptr));
    signalDict->insert("clicked(bool)",
        new QtSignal(SIGNAL(clicked(bool)), nullptr));
    signalDict->insert("clicked()",
        new QtSignal(SIGNAL(clicked()), nullptr));
    signalDict->insert("triggered(bool)",
        new QtSignal(SIGNAL(triggered(bool)), nullptr));
    signalDict->insert("triggered()",
        new QtSignal(SIGNAL(triggered()), nullptr));
    signalDict->insert("returnPressed()",
        new QtSignal(SIGNAL(returnPressed()), nullptr));
    signalDict->insert("editingFinished()",
        new QtSignal(SIGNAL(editingFinished()), nullptr));
    signalDict->insert("timeout()",
        new QtSignal(SIGNAL(timeout()), nullptr));


//     signalDict->insert("localToLocal(int)", new QtSignal(SIGNAL(localToLocal(int)),
//                        (void *)emit_localToLocal, INT));


    // Create Qt standard slots dictionnary
    slotDict = new QMap<QString, QString>;
    slotDict->clear();
    slotDict->insert("click()", SLOT(click()));
    slotDict->insert("trigger()", SLOT(trigger()));
    slotDict->insert("setEnabled(bool)", SLOT(setEnabled(bool)));
    slotDict->insert("setDisabled(bool)", SLOT(setDisabled(bool)));
    slotDict->insert("quit()", SLOT(quit()));
    slotDict->insert("setText(const QString&)", SLOT(setText(const QString&)));
    slotDict->insert("clear()", SLOT(clear()));
    slotDict->insert("setText(const QString&)", SLOT(setText(const QString&)));
    slotDict->insert("clear()", SLOT(clear()));
    slotDict->insert("start()", SLOT(start()));
    slotDict->insert("stop()", SLOT(stop()));
    slotDict->insert("setDisabled(bool)", SLOT(setDisabled(bool)));
    slotDict->insert("setWindowTitle(const QString&)", SLOT(setWindowTitle(const QString&)));
    slotDict->insert("setFocus()", SLOT(setFocus()));
    slotDict->insert("update()", SLOT(update()));
    slotDict->insert("show()", SLOT(show()));

    slotDict->insert("QWSlot()", SLOT(QWSlot()));
    slotDict->insert("QWSlot(int)", SLOT(QWSlot(int)));
    slotDict->insert("QWSlot(QString)", SLOT(QWSlot(const QString)));
    slotDict->insert("QWSlot(bool)", SLOT(QWSlot(bool)));
    slotDict->insert("QWLocalToLocalSlot(int)", SLOT(QWLocalToLocalSlot(int)));







    // For debug
//     printf("argc = %d\n", cc);
//     for (int i = 0; i < cc; i++) printf("argv[%d] = \"%s\"\n", i, vv[i]);
    
    // For debug
//     connectLog = fopen("connect.log", "w+");
    

    QCoreApplication * inst = QCoreApplication::instance();
//     std::cerr << "QWApplicationCtor inst before = " << inst << "\n";

    QApplication *app = new QApplication(cc, vv);

    inst = QCoreApplication::instance();
//     std::cerr << "QWApplicationCtor inst after =  " << inst << "\n";
//     std::cerr << "                  qApp = " << qApp << "\n";

    return reinterpret_cast<void *>(app);
}

int QWApplicationExec(void * obj)
{
    return reinterpret_cast<QApplication * >(obj)->exec();
}

void * QWApplicationInstance()
{
    QCoreApplication * inst = QCoreApplication::instance();
    return reinterpret_cast<void *>(inst);
}


////////


void QWQAbstractButtonsetText(void * obj, char * text)
{
    QAbstractButton * ptr = reinterpret_cast<QAbstractButton *>(obj);
    QString xtext = QString(text);
    ptr->setText(xtext);
}

char * QWQAbstractButtontext(void * obj)
{
    QAbstractButton * ptr = reinterpret_cast<QAbstractButton *>(obj);
     QString  retVal = ptr->text();
    char * xretVal = retVal.toLocal8Bit().data();
    return xretVal;
}

void QWQAbstractButtonclick(void * obj)
{
    QAbstractButton * ptr = reinterpret_cast<QAbstractButton *>(obj);
    ptr->click();
}

void * QWQActionCtor_1(void * parent)
{
    QObject * xparent = reinterpret_cast<QObject *>(parent);
    QAction * ptr = new QAction(xparent);
    return reinterpret_cast<void *>(ptr);
}

void QWQActiontrigger(void * obj)
{
    QAction * ptr = reinterpret_cast<QAction *>(obj);
    ptr->trigger();
}

void QWQActionsetEnabled(void * obj, int8_t  arg1)
{
    QAction * ptr = reinterpret_cast<QAction *>(obj);
    bool xarg1 = arg1;
    ptr->setEnabled(xarg1);
}

void QWQActionsetDisabled(void * obj, int8_t  b)
{
    QAction * ptr = reinterpret_cast<QAction *>(obj);
    bool xb = b;
    ptr->setDisabled(xb);
}

void QWQActionDtor(void * obj)
{
    QAction * ptr = reinterpret_cast<QAction *>(obj);
    delete ptr;
}

void QWQBoxLayoutaddLayout(void * obj, void * layout, int32_t  stretch)
{
    QBoxLayout * ptr = reinterpret_cast<QBoxLayout *>(obj);
    QLayout * xlayout = reinterpret_cast<QLayout *>(layout);
    int xstretch = stretch;
    ptr->addLayout(xlayout, xstretch);
}

int8_t QWQCoreApplicationsendEvent(void * obj, void * receiver, void * event)
{
    QCoreApplication * ptr = reinterpret_cast<QCoreApplication *>(obj);
    QObject * xreceiver = reinterpret_cast<QObject *>(receiver);
    QEvent * xevent = reinterpret_cast<QEvent *>(event);
     bool  retVal = ptr->sendEvent(xreceiver, xevent);
    return retVal;
}

void QWQCoreApplicationquit(void * obj)
{
    QCoreApplication * ptr = reinterpret_cast<QCoreApplication *>(obj);
    ptr->quit();
}

void * QWQHBoxLayoutCtor_1()
{
    QHBoxLayout * ptr = new QHBoxLayout();
    return reinterpret_cast<void *>(ptr);
}

void QWQHBoxLayoutDtor(void * obj)
{
    QHBoxLayout * ptr = reinterpret_cast<QHBoxLayout *>(obj);
    delete ptr;
}

void * QWQLabelCtor_1(void * parent, int  f)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    Qt::WindowFlags xf = static_cast<Qt::WindowFlags>(f);
    QLabel * ptr = new QLabel(xparent, xf);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQLabelCtor_1(void * parent, int  f)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    Qt::WindowFlags xf = static_cast<Qt::WindowFlags>(f);
    SCQLabel * ptr = new SCQLabel(xparent, xf);
    return reinterpret_cast<void *>(ptr);
}

void * QWQLabelCtor_2(char * text, void * parent, int  f)
{
    QString xtext = QString(text);
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    Qt::WindowFlags xf = static_cast<Qt::WindowFlags>(f);
    QLabel * ptr = new QLabel(xtext, xparent, xf);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQLabelCtor_2(char * text, void * parent, int  f)
{
    QString xtext = QString(text);
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    Qt::WindowFlags xf = static_cast<Qt::WindowFlags>(f);
    SCQLabel * ptr = new SCQLabel(xtext, xparent, xf);
    return reinterpret_cast<void *>(ptr);
}

void QWQLabelsetTextFormat(void * obj, int  arg1)
{
    QLabel * ptr = reinterpret_cast<QLabel *>(obj);
    Qt::TextFormat xarg1 = static_cast<Qt::TextFormat>(arg1);
    ptr->setTextFormat(xarg1);
}

void QWQLabelsetAlignment(void * obj, int  arg1)
{
    QLabel * ptr = reinterpret_cast<QLabel *>(obj);
    Qt::Alignment xarg1 = static_cast<Qt::Alignment>(arg1);
    ptr->setAlignment(xarg1);
    /* WARNING:
Can't find any postcall conversion for COMPOSITE
from QLabel  Qt::Alignment  xarg1 to int  arg1
><  */
}

void QWQLabelsetMargin(void * obj, int32_t  arg1)
{
    QLabel * ptr = reinterpret_cast<QLabel *>(obj);
    int xarg1 = arg1;
    ptr->setMargin(xarg1);
}

void QWQLabelsetText(void * obj, char * arg1)
{
    QLabel * ptr = reinterpret_cast<QLabel *>(obj);
    QString xarg1 = QString(arg1);
    ptr->setText(xarg1);
}

void QWQLabelclear(void * obj)
{
    QLabel * ptr = reinterpret_cast<QLabel *>(obj);
    ptr->clear();
}

void QWvalidateCB_QLabel(void *obj, int32_t objId, char *methodName)
{
    SCQLabel * ptr = reinterpret_cast<SCQLabel *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQLabelDtor(void * obj)
{
    QLabel * ptr = reinterpret_cast<QLabel *>(obj);
    delete ptr;
}

void SCWQLabelDtor(void * obj)
{
    QLabel * ptr = reinterpret_cast<QLabel *>(obj);
    delete ptr;
}

int8_t QWQLayoutsetAlignment_1(void * obj, void * w, int  alignment)
{
    QLayout * ptr = reinterpret_cast<QLayout *>(obj);
    QWidget * xw = reinterpret_cast<QWidget *>(w);
    Qt::Alignment xalignment = static_cast<Qt::Alignment>(alignment);
     bool  retVal = ptr->setAlignment(xw, xalignment);
    /* WARNING:
Can't find any postcall conversion for COMPOSITE
from QLayout  Qt::Alignment  xalignment to int  alignment
><  */
    return retVal;
}

int8_t QWQLayoutsetAlignment_2(void * obj, void * l, int  alignment)
{
    QLayout * ptr = reinterpret_cast<QLayout *>(obj);
    QLayout * xl = reinterpret_cast<QLayout *>(l);
    Qt::Alignment xalignment = static_cast<Qt::Alignment>(alignment);
     bool  retVal = ptr->setAlignment(xl, xalignment);
    /* WARNING:
Can't find any postcall conversion for COMPOSITE
from QLayout  Qt::Alignment  xalignment to int  alignment
><  */
    return retVal;
}

void QWQLayoutaddWidget(void * obj, void * w)
{
    QLayout * ptr = reinterpret_cast<QLayout *>(obj);
    QWidget * xw = reinterpret_cast<QWidget *>(w);
    ptr->addWidget(xw);
}

void * QWQLineEditCtor_1(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    QLineEdit * ptr = new QLineEdit(xparent);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQLineEditCtor_1(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    SCQLineEdit * ptr = new SCQLineEdit(xparent);
    return reinterpret_cast<void *>(ptr);
}

void * QWQLineEditCtor_2(char * arg1, void * parent)
{
    QString xarg1 = QString(arg1);
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    QLineEdit * ptr = new QLineEdit(xarg1, xparent);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQLineEditCtor_2(char * arg1, void * parent)
{
    QString xarg1 = QString(arg1);
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    SCQLineEdit * ptr = new SCQLineEdit(xarg1, xparent);
    return reinterpret_cast<void *>(ptr);
}

char * QWQLineEdittext(void * obj)
{
    QLineEdit * ptr = reinterpret_cast<QLineEdit *>(obj);
     QString  retVal = ptr->text();
    char * xretVal = retVal.toLocal8Bit().data();
    return xretVal;
}

void QWQLineEditsetAlignment(void * obj, int  flag)
{
    QLineEdit * ptr = reinterpret_cast<QLineEdit *>(obj);
    Qt::Alignment xflag = static_cast<Qt::Alignment>(flag);
    ptr->setAlignment(xflag);
    /* WARNING:
Can't find any postcall conversion for COMPOSITE
from QLineEdit  Qt::Alignment  xflag to int  flag
><  */
}

void QWQLineEditsetText(void * obj, char * arg1)
{
    QLineEdit * ptr = reinterpret_cast<QLineEdit *>(obj);
    QString xarg1 = QString(arg1);
    ptr->setText(xarg1);
}

void QWQLineEditclear(void * obj)
{
    QLineEdit * ptr = reinterpret_cast<QLineEdit *>(obj);
    ptr->clear();
}

void QWvalidateCB_QLineEdit(void *obj, int32_t objId, char *methodName)
{
    SCQLineEdit * ptr = reinterpret_cast<SCQLineEdit *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQLineEditDtor(void * obj)
{
    QLineEdit * ptr = reinterpret_cast<QLineEdit *>(obj);
    delete ptr;
}

void SCWQLineEditDtor(void * obj)
{
    QLineEdit * ptr = reinterpret_cast<QLineEdit *>(obj);
    delete ptr;
}

void * QWQMenuCtor_1(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    QMenu * ptr = new QMenu(xparent);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQMenuCtor_1(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    SCQMenu * ptr = new SCQMenu(xparent);
    return reinterpret_cast<void *>(ptr);
}

void * QWQMenuCtor_2(char * title, void * parent)
{
    QString xtitle = QString(title);
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    QMenu * ptr = new QMenu(xtitle, xparent);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQMenuCtor_2(char * title, void * parent)
{
    QString xtitle = QString(title);
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    SCQMenu * ptr = new SCQMenu(xtitle, xparent);
    return reinterpret_cast<void *>(ptr);
}

void * QWQMenuaddAction_1(void * obj, char * text)
{
    QMenu * ptr = reinterpret_cast<QMenu *>(obj);
    QString xtext = QString(text);
     QAction * retVal = ptr->addAction(xtext);
    return retVal;
}

void * QWQMenuexec_1(void * obj)
{
    QMenu * ptr = reinterpret_cast<QMenu *>(obj);
     QAction * retVal = ptr->exec();
    return retVal;
}

void QWvalidateCB_QMenu(void *obj, int32_t objId, char *methodName)
{
    SCQMenu * ptr = reinterpret_cast<SCQMenu *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQMenuDtor(void * obj)
{
    QMenu * ptr = reinterpret_cast<QMenu *>(obj);
    delete ptr;
}

void SCWQMenuDtor(void * obj)
{
    QMenu * ptr = reinterpret_cast<QMenu *>(obj);
    delete ptr;
}

void * QWQPushButtonCtor_2(char * text, void * parent)
{
    QString xtext = QString(text);
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    QPushButton * ptr = new QPushButton(xtext, xparent);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQPushButtonCtor_2(char * text, void * parent)
{
    QString xtext = QString(text);
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    SCQPushButton * ptr = new SCQPushButton(xtext, xparent);
    return reinterpret_cast<void *>(ptr);
}

void QWQPushButtonsetMenu(void * obj, void * menu)
{
    QPushButton * ptr = reinterpret_cast<QPushButton *>(obj);
    QMenu * xmenu = reinterpret_cast<QMenu *>(menu);
    ptr->setMenu(xmenu);
}

void QWvalidateCB_QPushButton(void *obj, int32_t objId, char *methodName)
{
    SCQPushButton * ptr = reinterpret_cast<SCQPushButton *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQPushButtonDtor(void * obj)
{
    QPushButton * ptr = reinterpret_cast<QPushButton *>(obj);
    delete ptr;
}

void SCWQPushButtonDtor(void * obj)
{
    QPushButton * ptr = reinterpret_cast<QPushButton *>(obj);
    delete ptr;
}

void * QWQTextEditCtor_1(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    QTextEdit * ptr = new QTextEdit(xparent);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQTextEditCtor_1(void * parent)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    SCQTextEdit * ptr = new SCQTextEdit(xparent);
    return reinterpret_cast<void *>(ptr);
}

char * QWQTextEdittoPlainText(void * obj)
{
    QTextEdit * ptr = reinterpret_cast<QTextEdit *>(obj);
     QString  retVal = ptr->toPlainText();
    char * xretVal = retVal.toLocal8Bit().data();
    return xretVal;
}

void QWvalidateCB_QTextEdit(void *obj, int32_t objId, char *methodName)
{
    SCQTextEdit * ptr = reinterpret_cast<SCQTextEdit *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQTextEditDtor(void * obj)
{
    QTextEdit * ptr = reinterpret_cast<QTextEdit *>(obj);
    delete ptr;
}

void SCWQTextEditDtor(void * obj)
{
    QTextEdit * ptr = reinterpret_cast<QTextEdit *>(obj);
    delete ptr;
}

void * QWQTimerCtor(void * parent)
{
    QObject * xparent = reinterpret_cast<QObject *>(parent);
    QTimer * ptr = new QTimer(xparent);
    return reinterpret_cast<void *>(ptr);
}

void QWQTimersetInterval_1(void * obj, int32_t  msec)
{
    QTimer * ptr = reinterpret_cast<QTimer *>(obj);
    int xmsec = msec;
    ptr->setInterval(xmsec);
}

void QWQTimerstart_2(void * obj)
{
    QTimer * ptr = reinterpret_cast<QTimer *>(obj);
    ptr->start();
}

void QWQTimerstop(void * obj)
{
    QTimer * ptr = reinterpret_cast<QTimer *>(obj);
    ptr->stop();
}

void QWQTimerDtor(void * obj)
{
    QTimer * ptr = reinterpret_cast<QTimer *>(obj);
    delete ptr;
}

void * QWQVBoxLayoutCtor_1()
{
    QVBoxLayout * ptr = new QVBoxLayout();
    return reinterpret_cast<void *>(ptr);
}

void QWQVBoxLayoutDtor(void * obj)
{
    QVBoxLayout * ptr = reinterpret_cast<QVBoxLayout *>(obj);
    delete ptr;
}

void * QWQWidgetCtor(void * parent, int  f)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    Qt::WindowFlags xf = static_cast<Qt::WindowFlags>(f);
    QWidget * ptr = new QWidget(xparent, xf);
    return reinterpret_cast<void *>(ptr);
}

void * SCWQWidgetCtor(void * parent, int  f)
{
    QWidget * xparent = reinterpret_cast<QWidget *>(parent);
    Qt::WindowFlags xf = static_cast<Qt::WindowFlags>(f);
    SCQWidget * ptr = new SCQWidget(xparent, xf);
    return reinterpret_cast<void *>(ptr);
}

void QWQWidgetsetDisabled(void * obj, int8_t  arg1)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    bool xarg1 = arg1;
    ptr->setDisabled(xarg1);
}

int32_t QWQWidgetwidth(void * obj)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
     int  retVal = ptr->width();
    return retVal;
}

int32_t QWQWidgetheight(void * obj)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
     int  retVal = ptr->height();
    return retVal;
}

void QWQWidgetsetMinimumSize_2(void * obj, int32_t  minw, int32_t  minh)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    int xminw = minw;
    int xminh = minh;
    ptr->setMinimumSize(xminw, xminh);
}

void QWQWidgetsetFixedSize_2(void * obj, int32_t  w, int32_t  h)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    int xw = w;
    int xh = h;
    ptr->setFixedSize(xw, xh);
}

void QWQWidgetsetFixedWidth(void * obj, int32_t  w)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    int xw = w;
    ptr->setFixedWidth(xw);
}

void QWQWidgetsetFixedHeight(void * obj, int32_t  h)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    int xh = h;
    ptr->setFixedHeight(xh);
}

void * QWQWidgetfont(void * obj)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    const QFont & retVal = ptr->font();
    void * xretVal = const_cast<void *>(reinterpret_cast<const void *>(& retVal));
    return xretVal;
}

void QWQWidgetsetFont(void * obj, void * arg1)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    QFont & xarg1 = * reinterpret_cast<QFont *>(arg1);
    ptr->setFont(xarg1);
}

void QWQWidgetrender_1(void * obj, void * target, void * targetOffset, void * sourceRegion, int  renderFlags)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    QPaintDevice * xtarget = reinterpret_cast<QPaintDevice *>(target);
    QPoint & xtargetOffset = * reinterpret_cast<QPoint *>(targetOffset);
    QRegion & xsourceRegion = * reinterpret_cast<QRegion *>(sourceRegion);
    QWidget::RenderFlags xrenderFlags = static_cast<QWidget::RenderFlags>(renderFlags);
    ptr->render(xtarget, xtargetOffset, xsourceRegion, xrenderFlags);
    /* WARNING:
Can't find any postcall conversion for COMPOSITE
from QWidget  RenderFlags  xrenderFlags to int  renderFlags
><  */
}

void QWQWidgetsetWindowTitle(void * obj, char * arg1)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    QString xarg1 = QString(arg1);
    ptr->setWindowTitle(xarg1);
}

void QWQWidgetsetToolTip(void * obj, char * arg1)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    QString xarg1 = QString(arg1);
    ptr->setToolTip(xarg1);
}

void QWQWidgetsetFocus_1(void * obj)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    ptr->setFocus();
}

int8_t QWQWidgetisActiveWindow(void * obj)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
     bool  retVal = ptr->isActiveWindow();
    return retVal;
}

void QWQWidgetactivateWindow(void * obj)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    ptr->activateWindow();
}

void QWQWidgetsetFocus_2(void * obj, int  reason)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    Qt::FocusReason xreason = static_cast<Qt::FocusReason>(reason);
    ptr->setFocus(xreason);
}

void QWQWidgetsetFocusPolicy(void * obj, int  policy)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    Qt::FocusPolicy xpolicy = static_cast<Qt::FocusPolicy>(policy);
    ptr->setFocusPolicy(xpolicy);
}

void QWQWidgetupdate_1(void * obj)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    ptr->update();
}

void QWQWidgetupdate_2(void * obj, int32_t  x, int32_t  y, int32_t  w, int32_t  h)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    int xx = x;
    int xy = y;
    int xw = w;
    int xh = h;
    ptr->update(xx, xy, xw, xh);
}

void QWQWidgetshow(void * obj)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    ptr->show();
}

void QWQWidgetsetLayout(void * obj, void * arg1)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    QLayout * xarg1 = reinterpret_cast<QLayout *>(arg1);
    ptr->setLayout(xarg1);
}

void QWvalidateCB_QWidget(void *obj, int32_t objId, char *methodName)
{
    SCQWidget * ptr = reinterpret_cast<SCQWidget *>(obj);

    ptr->validateEvent(objId, methodName);

}
void QWQWidgetDtor(void * obj)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    delete ptr;
}

void SCWQWidgetDtor(void * obj)
{
    QWidget * ptr = reinterpret_cast<QWidget *>(obj);
    delete ptr;
}

void QWQBrushDtor(void * obj)
{
    QBrush * ptr = reinterpret_cast<QBrush *>(obj);
    delete ptr;
}

void QWQColorDtor(void * obj)
{
    QColor * ptr = reinterpret_cast<QColor *>(obj);
    delete ptr;
}

void QWQEventDtor(void * obj)
{
    QEvent * ptr = reinterpret_cast<QEvent *>(obj);
    delete ptr;
}

void QWQFontDtor(void * obj)
{
    QFont * ptr = reinterpret_cast<QFont *>(obj);
    delete ptr;
}

void QWQImageDtor(void * obj)
{
    QImage * ptr = reinterpret_cast<QImage *>(obj);
    delete ptr;
}

void QWQMouseEventDtor(void * obj)
{
    QMouseEvent * ptr = reinterpret_cast<QMouseEvent *>(obj);
    delete ptr;
}

void QWQPaintEventDtor(void * obj)
{
    QPaintEvent * ptr = reinterpret_cast<QPaintEvent *>(obj);
    delete ptr;
}

void QWQPainterDtor(void * obj)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    delete ptr;
}

void QWQPenDtor(void * obj)
{
    QPen * ptr = reinterpret_cast<QPen *>(obj);
    delete ptr;
}

void QWQPointDtor(void * obj)
{
    QPoint * ptr = reinterpret_cast<QPoint *>(obj);
    delete ptr;
}

void QWQPointFDtor(void * obj)
{
    QPointF * ptr = reinterpret_cast<QPointF *>(obj);
    delete ptr;
}

void QWQRectDtor(void * obj)
{
    QRect * ptr = reinterpret_cast<QRect *>(obj);
    delete ptr;
}

void QWQRegionDtor(void * obj)
{
    QRegion * ptr = reinterpret_cast<QRegion *>(obj);
    delete ptr;
}




// emit wrappers

void QWEmit_(void * source, char * signalName)
{
//     std::cout << "QWEmit_ " << signalName << "\n";
    QWConnectorE *src = reinterpret_cast<QWConnectorE *>(source);

    QString sigName = QString(signalName);    
    void (*f)(QWConnectorE *) = (void (*)(QWConnectorE *))
                                signalDict->value(sigName)->pcallemit;
    (*f)(src);
}

void QWEmit_Int(void * source, char * signalName, int32_t data)
{
//     std::cout << "QWEmit_Int " << signalName << "   data = " << data << "\n";
    QWConnectorE *src = reinterpret_cast<QWConnectorE *>(source);

    QString sigName = QString(signalName);
    void (*f)(QWConnectorE *, int32_t) = (void (*)(QWConnectorE *, int32_t))
                                signalDict->value(sigName)->pcallemit;
    (*f)(src, data);
}

void QWEmit_Str(void * source, char * signalName, char * data)
{
//     std::cout << "QWEmit_Str " << signalName << "   data = \"" << data << "\"\n";
    QWConnectorE *src = reinterpret_cast<QWConnectorE *>(source);

    QString sigName = QString(signalName);
    QString str = QString(data);
    void (*f)(QWConnectorE *, QString) = (void (*)(QWConnectorE *, QString))
                                signalDict->value(sigName)->pcallemit;
    (*f)(src, str);
}

void QWEmit_Bool(void * source, char * signalName, int32_t data)
{
//     std::cout << "QWEmit_Bool source: " << std::hex << source
//               << "  signalName: " << signalName
//               << "  data: " << data << "\n";
    QWConnectorE *src = reinterpret_cast<QWConnectorE *>(source);

    QString sigName = QString(signalName);  
    bool val = data;
    
//     std::cout << " A: " << std::hex << signalDict->value(sigName)->pcallemit
//               << "\n";
    
    void (*f)(QWConnectorE *, bool)
        = (void (*)(QWConnectorE *, bool))signalDict->value(sigName)->pcallemit;
    (*f)(src, val);    
    
//     std::cout << "AFTER calling (*f)(src, val)\n";
}







void QWconnect(void * source, char *signal, void * destination, char *slot)
{
    QObject *src = reinterpret_cast<QObject *>(source);
    QObject *dst = reinterpret_cast<QObject *>(destination);
    
//     std::cout << "CONNECT [" << signal << " -> " << slot << "]\n";

    QString qsignal = "2UNKNOWN(UNKNOWN)";
    QString qslot = "1UNKNOWN(UNKNOWN)";
    if (signalDict->contains(signal)) {
        QtSignal * qtSignal =  signalDict->value(signal);
        qsignal = qtSignal->signalName;
    }
    if (slotDict->contains(slot)) {
//         std::cout << "    slotDict contains " << slot << " !\n";
        qslot = slotDict->value(slot);
    } else if (signalDict->contains(slot)) {
//         std::cout << "    signalDict contains " << slot << " !\n";
        qslot = signalDict->value(slot)->signalName;
    }

//     std::cout << "CONNECT 0x" << std::hex << source << " "
//               << signal << " => " << qsignal.toLocal8Bit().data() << "\n"
//               << "        0x" << std::hex << destination << " "
//               << slot << " => " << qslot.toLocal8Bit().data() << "\n";

    if (!(QObject::connect(src, qsignal.toLocal8Bit().data(),
                           dst, qslot.toLocal8Bit().data()))) {
        std::cerr << "Can't connect "
                            << src << ":\"" << signal << "\""
                  << " to " << dst << ":\"" << slot   << "\"\n";
    }
    
    // for debug
//     fprintf(connectLog, "0x%08lX %s --> 0x%08lX %s\n",
//                         (ulong) src, qsignal.toLocal8Bit().data(),
//                         (ulong) dst, qslot.toLocal8Bit().data());
//     fflush(connectLog);
    
}






void * QWConnectorRCTOR(int objId, char * slotName, char * slotSig)
{
    QWConnectorR *c = new QWConnectorR(objId, slotName, slotSig);
//     std::cerr << "QWConnectorR CTOR " << c
//               << "   objId = " << objId
//               << "   slotName = " << slotName << "\n";
    return reinterpret_cast<void *>(c);
}

void QWConnectorRDTOR(void * obj)
{
    QWConnectorR *c = reinterpret_cast<QWConnectorR *>(obj);
//      std::cerr << "QWConnectorR DTOR " << c << "\n";
     delete c;
}


QWConnectorR::QWConnectorR(int objId, char * slotName, char * slotSig)
{
    m_objId = objId;
    m_slotName = QString(slotName);
    m_slotSig = QString(slotSig);
}

void QWConnectorR::QWSlot()
{

//     std::cout << "QWConnectorR::QWSlot (A) : slotName = "
//               << m_slotName.toLocal8Bit().data()
//               << "   id = " << m_objId << "\n";
// 
//     std::cout << "QWConnectorR::QWSlot() : slotCallback called\n";
   (*slotCallback)(m_objId, m_slotName.toLocal8Bit().data());
}

// Example : ???
void QWConnectorR::QWSlot(int val)
{
//     std::cout << "QWConnectorR::QWSlot(int) (B) : slotName = "
//               << m_slotName.toLocal8Bit().data()
//               << "   id = " << m_objId << "\n";
// 
//     std::cout << "QWConnectorR::QWSlot(int) : slotCallbackInt called\n";
    (*slotCallbackInt)(m_objId, m_slotName.toLocal8Bit().data(), val);
}

void QWConnectorR::QWSlot(bool b)
{
//     std::cout << "QWConnectorR::QWSlot(bool) (D) : slotName = "
//               << m_slotName.toLocal8Bit().data()
//               << "   id = " << m_objId << "\n";
// 
//     std::cout << "QWConnectorR::QWSlot(bool) : slotCallbackBool called\n";
    (*slotCallbackBool)(m_objId, m_slotName.toLocal8Bit().data(), b ? 1 : 0);
}

// Example : signal "windowTitleChanged(const QString &title)" from QWidget
void QWConnectorR::QWSlot(const QString str)
{
//     std::cout << "QWConnectorR::QWSlot(QString) (C) : slotName = "
//               << m_slotName.toLocal8Bit().data()
//               << "   id = " << m_objId << "\n";
// 
//     std::cout << "QWConnectorR::QWSlot(Qstring &) : slotCallbackStr called\n";
//     std::cout << "      data = \"" << str.toLocal8Bit().data() << "\"\n";

   (*slotCallbackStr)(m_objId, m_slotName.toLocal8Bit().data(),
                                            str.toLocal8Bit().data());
}

void QWConnectorR::QWLocalToLocalSlot(int dataId)
{
//     std::cout << "QWConnectorR::QWLocalToLocalSlot(dataId="
//               << dataId << ") : slotName = "
//               << m_slotName.toLocal8Bit().data()
//               << "   id = " << m_objId << "\n";
// 
//     std::cout << "0x" << std::hex << this
//               << " dataId=" << dataId << " : slotCallbackComplexSig called\n";

  (*slotCallbackComplexSig)(m_objId, m_slotName.toLocal8Bit().data(), dataId);
}


///============================================================


void * QWConnectorECTOR(int objId, char * signalName, char * signalSig)
{
    QWConnectorE *c = new QWConnectorE(objId, signalName, signalSig);
//     std::cout << "QWConnectorE CTOR " << c
//               << "   objId = " << objId
//               << "   signalName = " << signalName << "\n";
    return reinterpret_cast<void *>(c);
}

void QWConnectorEDTOR(void * obj)
{
    QWConnectorE *c = reinterpret_cast<QWConnectorE *>(obj);
//    std::cerr << "QWConnectorE DTOR " << c << "\n";
    delete c;
}


QWConnectorE::QWConnectorE(int objId, char * signalName, char * signalSig)
{
//     std::cout << " ++ QWConnectorE CTOR start\n";
    m_objId = objId;
    m_signalName = QString(signalName);
    m_signalSig = QString(signalSig);
//     std::cout << " -- QWConnectorE CTOR end\n";
//     std::cout.flush();
}

///////////////////////////////////////////////////////////////

// Native helpers

char * QWGetStringFromPointer(void * ptr)
{
    char * s = (char *) ptr;
    return s;
}

void * QWGetPointerFromString(char * str)
{
    return (void *) str;
}

double QWGetDoubleFromPointer(void * ptr)
{
    double * d = (double *) ptr;
    return *d;
}

void * QWGetPointerFromDouble(double * pd)
{
    return (void *) pd;
}


// REMPLACER int PAR long ???
int64_t QWPointer2Int(void * val)
{
    int64_t ival = (int64_t) val;
    return ival;
}

// REMPLACER int PAR long ???
void * QWInt2Pointer(int64_t val)
{
    void * p = (void *) val;
   return p;
}



// Callbacks initializers

void QWSetupSlotCallback(void (*f)(int32_t objId, char *slotName))
{
    slotCallback = f;
}

void QWSetupSlotCallbackInt(void (*f)(int32_t objId, char *slotName, STD_INT i))
{
    slotCallbackInt = f;
}

void QWSetupSlotCallbackInt2(void (*f)(int32_t objId, char *slotName,
                                                    STD_INT i1, STD_INT i2))
{
    slotCallbackInt2 = f;
}

void QWSetupSlotCallbackStr(void (*f)(int32_t objId, char *slotName, char *s))
{
    slotCallbackStr = f;
}

void QWSetupSlotCallbackIntStr(void (*f)(int32_t objId, char *slotName,
                                                        STD_INT i, char *s))
{
    slotCallbackIntStr = f;
}

void QWSetupSlotCallbackBool(void (*f)(int32_t objId, char *slotName, uchar b))
{
//     std::cout << "QWSetupSlotCallbackBool f=" << (void *)f << "\n";
    slotCallbackBool = f;
}

void QWSetupSlotCallbackPointer(void (*f)(int32_t objId, char *slotName, void *p))
{
//     std::cout << "QWSetupSlotCallbackPointer f=" << (void *)f << "\n";
//     std::cout << "&slotCallbackPointer=" << &slotCallbackPointer << "\n";
    slotCallbackPointer = f;
}

void QWSetupSlotCallbackQEvent(
    void (*f)(int32_t objId, const char *slotName, QEvent* event))
{
    slotCallbackQEvent = f;
}

void QWSetupSlotCallbackQMouseEvent(
    void (*f)(int32_t objId, const char *slotName, QMouseEvent* event))
{
    slotCallbackQMouseEvent = f;
}

void QWSetupSlotCallbackQPaintEvent(
    void (*f)(int32_t objId, const char *slotName, QPaintEvent* event))
{
    slotCallbackQPaintEvent = f;
}




void QWSetupSlotCallbackComplexSig(void (*f)(int32_t objId, char *slotName,
                                                            uint32_t dataId))
{
    slotCallbackComplexSig = f;
}


///////////////////////////////////////////////////////////////


// Only for debug
void QWDump()
{
    std::cout << "QWDump : SIGNALDICT\n";
    QMap<QString, QtSignal * >::const_iterator it = signalDict->constBegin();
    while (it != signalDict->constEnd()) {
        std::cout << "   " << it.key().toLocal8Bit().data() << " : ";
        it.value()->dump();
        std::cout << std::endl;
        ++it;
    }

    std::cout << "QWDump : SLOTDICT\n";
    QMap<QString, QString>::const_iterator i = slotDict->constBegin();
    while (i != slotDict->constEnd()) {
        std::cout << "   " << i.key().toLocal8Bit().data()
                << " : " << i.value().toLocal8Bit().data() << std::endl;
        ++i;
    }

//     std::cout << "\n";
//     QObject::dumpObjectInfo()
//     std::cout << "\n";
}



//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
// Subclasses

void * QWQBrushCtor_1()
{
    QBrush * ptr = new QBrush();
    return reinterpret_cast<void *>(ptr);
}

void * QWQBrushCtor_2(int  bs)
{
    Qt::BrushStyle xbs = static_cast<Qt::BrushStyle>(bs);
    QBrush * ptr = new QBrush(xbs);
    return reinterpret_cast<void *>(ptr);
}

void * QWQBrushCtor_3(void * color, int  bs)
{
    QColor & xcolor = * reinterpret_cast<QColor *>(color);
    Qt::BrushStyle xbs = static_cast<Qt::BrushStyle>(bs);
    QBrush * ptr = new QBrush(xcolor, xbs);
    return reinterpret_cast<void *>(ptr);
}

void * QWQColorCtor_2(int  color)
{
    Qt::GlobalColor xcolor = static_cast<Qt::GlobalColor>(color);
    QColor * ptr = new QColor(xcolor);
    return reinterpret_cast<void *>(ptr);
}

void * QWQColorCtor_3(int32_t  r, int32_t  g, int32_t  b, int32_t  a)
{
    int xr = r;
    int xg = g;
    int xb = b;
    int xa = a;
    QColor * ptr = new QColor(xr, xg, xb, xa);
    return reinterpret_cast<void *>(ptr);
}

void * QWQEventCtor_1(int  type)
{
    QEvent::Type xtype = static_cast<QEvent::Type>(type);
    QEvent * ptr = new QEvent(xtype);
    return reinterpret_cast<void *>(ptr);
}

void * QWQEventCtor_2(void * other)
{
    QEvent & xother = * reinterpret_cast<QEvent *>(other);
    QEvent * ptr = new QEvent(xother);
    return reinterpret_cast<void *>(ptr);
}

void * QWQFontCtor_1()
{
    QFont * ptr = new QFont();
    return reinterpret_cast<void *>(ptr);
}

void * QWQImageCtor_3(int32_t  width, int32_t  height, int  format)
{
    int xwidth = width;
    int xheight = height;
    QImage::Format xformat = static_cast<QImage::Format>(format);
    QImage * ptr = new QImage(xwidth, xheight, xformat);
    return reinterpret_cast<void *>(ptr);
}

void * QWQMouseEventCtor_1(int  type, void * localPos, int  button, int  buttons, int  modifiers)
{
    QMouseEvent::Type xtype = static_cast<QMouseEvent::Type>(type);
    QPointF & xlocalPos = * reinterpret_cast<QPointF *>(localPos);
    Qt::MouseButton xbutton = static_cast<Qt::MouseButton>(button);
    Qt::MouseButtons xbuttons = static_cast<Qt::MouseButtons>(buttons);
    Qt::KeyboardModifiers xmodifiers = static_cast<Qt::KeyboardModifiers>(modifiers);
    QMouseEvent * ptr = new QMouseEvent(xtype, xlocalPos, xbutton, xbuttons, xmodifiers);
    return reinterpret_cast<void *>(ptr);
}

void * QWQMouseEventCtor_2(int  type, void * localPos, void * screenPos, int  button, int  buttons, int  modifiers)
{
    QMouseEvent::Type xtype = static_cast<QMouseEvent::Type>(type);
    QPointF & xlocalPos = * reinterpret_cast<QPointF *>(localPos);
    QPointF & xscreenPos = * reinterpret_cast<QPointF *>(screenPos);
    Qt::MouseButton xbutton = static_cast<Qt::MouseButton>(button);
    Qt::MouseButtons xbuttons = static_cast<Qt::MouseButtons>(buttons);
    Qt::KeyboardModifiers xmodifiers = static_cast<Qt::KeyboardModifiers>(modifiers);
    QMouseEvent * ptr = new QMouseEvent(xtype, xlocalPos, xscreenPos, xbutton, xbuttons, xmodifiers);
    return reinterpret_cast<void *>(ptr);
}

void * QWQMouseEventCtor_3(int  type, void * localPos, void * windowPos, void * screenPos, int  button, int  buttons, int  modifiers)
{
    QMouseEvent::Type xtype = static_cast<QMouseEvent::Type>(type);
    QPointF & xlocalPos = * reinterpret_cast<QPointF *>(localPos);
    QPointF & xwindowPos = * reinterpret_cast<QPointF *>(windowPos);
    QPointF & xscreenPos = * reinterpret_cast<QPointF *>(screenPos);
    Qt::MouseButton xbutton = static_cast<Qt::MouseButton>(button);
    Qt::MouseButtons xbuttons = static_cast<Qt::MouseButtons>(buttons);
    Qt::KeyboardModifiers xmodifiers = static_cast<Qt::KeyboardModifiers>(modifiers);
    QMouseEvent * ptr = new QMouseEvent(xtype, xlocalPos, xwindowPos, xscreenPos, xbutton, xbuttons, xmodifiers);
    return reinterpret_cast<void *>(ptr);
}

void * QWQMouseEventCtor_4(int  type, void * localPos, void * windowPos, void * screenPos, int  button, int  buttons, int  modifiers, int  source)
{
    QMouseEvent::Type xtype = static_cast<QMouseEvent::Type>(type);
    QPointF & xlocalPos = * reinterpret_cast<QPointF *>(localPos);
    QPointF & xwindowPos = * reinterpret_cast<QPointF *>(windowPos);
    QPointF & xscreenPos = * reinterpret_cast<QPointF *>(screenPos);
    Qt::MouseButton xbutton = static_cast<Qt::MouseButton>(button);
    Qt::MouseButtons xbuttons = static_cast<Qt::MouseButtons>(buttons);
    Qt::KeyboardModifiers xmodifiers = static_cast<Qt::KeyboardModifiers>(modifiers);
    Qt::MouseEventSource xsource = static_cast<Qt::MouseEventSource>(source);
    QMouseEvent * ptr = new QMouseEvent(xtype, xlocalPos, xwindowPos, xscreenPos, xbutton, xbuttons, xmodifiers, xsource);
    return reinterpret_cast<void *>(ptr);
}

void * QWQPaintEventCtor_2(void * paintRect)
{
    QRect & xpaintRect = * reinterpret_cast<QRect *>(paintRect);
    QPaintEvent * ptr = new QPaintEvent(xpaintRect);
    return reinterpret_cast<void *>(ptr);
}

void * QWQPainterCtor_1()
{
    QPainter * ptr = new QPainter();
    return reinterpret_cast<void *>(ptr);
}

void * QWQPenCtor_1()
{
    QPen * ptr = new QPen();
    return reinterpret_cast<void *>(ptr);
}

void * QWQPenCtor_2(int  arg1)
{
    Qt::PenStyle xarg1 = static_cast<Qt::PenStyle>(arg1);
    QPen * ptr = new QPen(xarg1);
    return reinterpret_cast<void *>(ptr);
}

void * QWQPenCtor_3(void * color)
{
    QColor & xcolor = * reinterpret_cast<QColor *>(color);
    QPen * ptr = new QPen(xcolor);
    return reinterpret_cast<void *>(ptr);
}

void * QWQPointCtor_1()
{
    QPoint * ptr = new QPoint();
    return reinterpret_cast<void *>(ptr);
}

void * QWQPointCtor_2(int32_t  xpos, int32_t  ypos)
{
    int xxpos = xpos;
    int xypos = ypos;
    QPoint * ptr = new QPoint(xxpos, xypos);
    return reinterpret_cast<void *>(ptr);
}

void * QWQPointFCtor_1()
{
    QPointF * ptr = new QPointF();
    return reinterpret_cast<void *>(ptr);
}

void * QWQPointFCtor_2(void * p)
{
    QPoint & xp = * reinterpret_cast<QPoint *>(p);
    QPointF * ptr = new QPointF(xp);
    return reinterpret_cast<void *>(ptr);
}

void * QWQPointFCtor_3(double  xpos, double  ypos)
{
    qreal xxpos = xpos;
    qreal xypos = ypos;
    QPointF * ptr = new QPointF(xxpos, xypos);
    return reinterpret_cast<void *>(ptr);
}

void * QWQRectCtor_1()
{
    QRect * ptr = new QRect();
    return reinterpret_cast<void *>(ptr);
}

void * QWQRectCtor_2(void * topleft, void * bottomright)
{
    QPoint & xtopleft = * reinterpret_cast<QPoint *>(topleft);
    QPoint & xbottomright = * reinterpret_cast<QPoint *>(bottomright);
    QRect * ptr = new QRect(xtopleft, xbottomright);
    return reinterpret_cast<void *>(ptr);
}

void * QWQRectCtor_4(int32_t  left, int32_t  top, int32_t  width, int32_t  height)
{
    int xleft = left;
    int xtop = top;
    int xwidth = width;
    int xheight = height;
    QRect * ptr = new QRect(xleft, xtop, xwidth, xheight);
    return reinterpret_cast<void *>(ptr);
}

void * QWQRegionCtor_1()
{
    QRegion * ptr = new QRegion();
    return reinterpret_cast<void *>(ptr);
}


// YGYGYG PB : Ref√©rence √† "SCQTextEdit" ci-dessus !!!!!!!


void QWvalidateEvent(void *obj, int32_t objId, char *methodName)
{
//     std::cout << "QWvalidateEvent start\n";

    // Une MAUVAISE solution
    // SCQTextEdit *ste = reinterpret_cast<SCQTextEdit *>(obj);
    // ste->validateEvent(objId, eventType, methodName);

   CallbackValidator * ptr = reinterpret_cast<CallbackValidator *>(obj);
   /// ET CA, CA NE MARCHE PAS !!!
   /// (reinterpret_cast vs dynamic_cast QU'O? NE PEUT UTILISER ICI !!!)

    ptr->validateEvent(objId, methodName);
//     std::cout << "QWvalidateEvent stop\n";
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
// SubAPI

void QWQBrushsetStyle(void * obj, int  arg1)
{
    QBrush * ptr = reinterpret_cast<QBrush *>(obj);
    Qt::BrushStyle xarg1 = static_cast<Qt::BrushStyle>(arg1);
    ptr->setStyle(xarg1);
}

void QWQBrushsetColor_1(void * obj, void * color)
{
    QBrush * ptr = reinterpret_cast<QBrush *>(obj);
    QColor & xcolor = * reinterpret_cast<QColor *>(color);
    ptr->setColor(xcolor);
}

int32_t QWQColoralpha(void * obj)
{
    QColor * ptr = reinterpret_cast<QColor *>(obj);
     int  retVal = ptr->alpha();
    return retVal;
}

int32_t QWQColorred(void * obj)
{
    QColor * ptr = reinterpret_cast<QColor *>(obj);
     int  retVal = ptr->red();
    return retVal;
}

int32_t QWQColorgreen(void * obj)
{
    QColor * ptr = reinterpret_cast<QColor *>(obj);
     int  retVal = ptr->green();
    return retVal;
}

int32_t QWQColorblue(void * obj)
{
    QColor * ptr = reinterpret_cast<QColor *>(obj);
     int  retVal = ptr->blue();
    return retVal;
}

int QWQEventtype(void * obj)
{
    QEvent * ptr = reinterpret_cast<QEvent *>(obj);
     QEvent::Type  retVal = ptr->type();
    return retVal;
}

int8_t QWQEventspontaneous(void * obj)
{
    QEvent * ptr = reinterpret_cast<QEvent *>(obj);
     bool  retVal = ptr->spontaneous();
    return retVal;
}

int8_t QWQEventisAccepted(void * obj)
{
    QEvent * ptr = reinterpret_cast<QEvent *>(obj);
     bool  retVal = ptr->isAccepted();
    return retVal;
}

void QWQEventaccept(void * obj)
{
    QEvent * ptr = reinterpret_cast<QEvent *>(obj);
    ptr->accept();
}

void QWQEventignore(void * obj)
{
    QEvent * ptr = reinterpret_cast<QEvent *>(obj);
    ptr->ignore();
}

void QWQFontsetFamily(void * obj, char * arg1)
{
    QFont * ptr = reinterpret_cast<QFont *>(obj);
    QString xarg1 = QString(arg1);
    ptr->setFamily(xarg1);
}

void QWQFontsetPointSize(void * obj, int32_t  arg1)
{
    QFont * ptr = reinterpret_cast<QFont *>(obj);
    int xarg1 = arg1;
    ptr->setPointSize(xarg1);
}

void QWQFontsetBold(void * obj, int8_t  arg1)
{
    QFont * ptr = reinterpret_cast<QFont *>(obj);
    bool xarg1 = arg1;
    ptr->setBold(xarg1);
}

void QWQFontsetItalic(void * obj, int8_t  b)
{
    QFont * ptr = reinterpret_cast<QFont *>(obj);
    bool xb = b;
    ptr->setItalic(xb);
}

int32_t QWQImagewidth(void * obj)
{
    QImage * ptr = reinterpret_cast<QImage *>(obj);
     int  retVal = ptr->width();
    return retVal;
}

int32_t QWQImageheight(void * obj)
{
    QImage * ptr = reinterpret_cast<QImage *>(obj);
     int  retVal = ptr->height();
    return retVal;
}

void * QWQImagepixelColor_1(void * obj, int32_t  x, int32_t  y)
{
    QImage * ptr = reinterpret_cast<QImage *>(obj);
    int xx = x;
    int xy = y;
     QColor  retVal = ptr->pixelColor(xx, xy);
    QColor * xxretVal = new QColor(retVal);
void * xretVal = reinterpret_cast<void *>(xxretVal);
    return xretVal;
}

void QWQImagefill_2(void * obj, void * color)
{
    QImage * ptr = reinterpret_cast<QImage *>(obj);
    QColor & xcolor = * reinterpret_cast<QColor *>(color);
    ptr->fill(xcolor);
}

int32_t QWQMouseEventx(void * obj)
{
    QMouseEvent * ptr = reinterpret_cast<QMouseEvent *>(obj);
     int  retVal = ptr->x();
    return retVal;
}

int32_t QWQMouseEventy(void * obj)
{
    QMouseEvent * ptr = reinterpret_cast<QMouseEvent *>(obj);
     int  retVal = ptr->y();
    return retVal;
}

int QWQMouseEventbutton(void * obj)
{
    QMouseEvent * ptr = reinterpret_cast<QMouseEvent *>(obj);
     Qt::MouseButton  retVal = ptr->button();
    return retVal;
}

void * QWQPaintEventrect(void * obj)
{
    QPaintEvent * ptr = reinterpret_cast<QPaintEvent *>(obj);
    const QRect & retVal = ptr->rect();
    void * xretVal = const_cast<void *>(reinterpret_cast<const void *>(& retVal));
    return xretVal;
}


void * QWQPainterCtor_QWidget(void * arg1)
{
    QWidget * xarg1 = reinterpret_cast<QWidget *>(arg1);
    QPainter * ptr = new QPainter(xarg1);
    return reinterpret_cast<void *>(ptr);
}

void * QWQPainterCtor_QImage(void * arg1)
{
    QImage * xarg1 = reinterpret_cast<QImage *>(arg1);
    QPainter * ptr = new QPainter(xarg1);
    return reinterpret_cast<void *>(ptr);
}

int8_t QWQPainterbegin_null(void * obj)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    bool  retVal = ptr->begin(nullptr);
    return retVal;
}

int8_t QWQPainterbegin_QWidget(void * obj, void * arg1)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    QPaintDevice * xarg1 = reinterpret_cast<QWidget *>(arg1);
    bool  retVal = ptr->begin(xarg1);
    return retVal;
}

int8_t QWQPainterbegin_QImage(void * obj, void * arg1)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    QPaintDevice * xarg1 = reinterpret_cast<QImage *>(arg1);
    bool  retVal = ptr->begin(xarg1);
    return retVal;
}
int8_t QWQPainterend(void * obj)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
     bool  retVal = ptr->end();
    return retVal;
}

void QWQPaintersetPen_1(void * obj, void * color)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    QColor & xcolor = * reinterpret_cast<QColor *>(color);
    ptr->setPen(xcolor);
}

void QWQPaintersetPen_2(void * obj, void * pen)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    QPen & xpen = * reinterpret_cast<QPen *>(pen);
    ptr->setPen(xpen);
}

void QWQPaintersetPen_3(void * obj, int  style)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    Qt::PenStyle xstyle = static_cast<Qt::PenStyle>(style);
    ptr->setPen(xstyle);
}

void QWQPaintersetBrush_1(void * obj, void * brush)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    QBrush & xbrush = * reinterpret_cast<QBrush *>(brush);
    ptr->setBrush(xbrush);
}

void QWQPaintersave(void * obj)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    ptr->save();
}

void QWQPainterrestore(void * obj)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    ptr->restore();
}

void QWQPainterdrawLine_3(void * obj, int32_t  x1, int32_t  y1, int32_t  x2, int32_t  y2)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    int xx1 = x1;
    int xy1 = y1;
    int xx2 = x2;
    int xy2 = y2;
    ptr->drawLine(xx1, xy1, xx2, xy2);
}

void QWQPainterdrawRect_2(void * obj, int32_t  x1, int32_t  y1, int32_t  w, int32_t  h)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    int xx1 = x1;
    int xy1 = y1;
    int xw = w;
    int xh = h;
    ptr->drawRect(xx1, xy1, xw, xh);
}

void QWQPainterdrawEllipse_3(void * obj, int32_t  x, int32_t  y, int32_t  w, int32_t  h)
{
    QPainter * ptr = reinterpret_cast<QPainter *>(obj);
    int xx = x;
    int xy = y;
    int xw = w;
    int xh = h;
    ptr->drawEllipse(xx, xy, xw, xh);
}

void QWQPensetWidth(void * obj, int32_t  width)
{
    QPen * ptr = reinterpret_cast<QPen *>(obj);
    int xwidth = width;
    ptr->setWidth(xwidth);
}

void QWQPensetColor(void * obj, void * color)
{
    QPen * ptr = reinterpret_cast<QPen *>(obj);
    QColor & xcolor = * reinterpret_cast<QColor *>(color);
    ptr->setColor(xcolor);
}

void QWQPensetBrush(void * obj, void * brush)
{
    QPen * ptr = reinterpret_cast<QPen *>(obj);
    QBrush & xbrush = * reinterpret_cast<QBrush *>(brush);
    ptr->setBrush(xbrush);
}

int8_t QWQPointisNull(void * obj)
{
    QPoint * ptr = reinterpret_cast<QPoint *>(obj);
     bool  retVal = ptr->isNull();
    return retVal;
}

int32_t QWQPointx(void * obj)
{
    QPoint * ptr = reinterpret_cast<QPoint *>(obj);
     int  retVal = ptr->x();
    return retVal;
}

int32_t QWQPointy(void * obj)
{
    QPoint * ptr = reinterpret_cast<QPoint *>(obj);
     int  retVal = ptr->y();
    return retVal;
}

void QWQPointsetX(void * obj, int32_t  x)
{
    QPoint * ptr = reinterpret_cast<QPoint *>(obj);
    int xx = x;
    ptr->setX(xx);
}

void QWQPointsetY(void * obj, int32_t  y)
{
    QPoint * ptr = reinterpret_cast<QPoint *>(obj);
    int xy = y;
    ptr->setY(xy);
}

int32_t QWQPointmanhattanLength(void * obj)
{
    QPoint * ptr = reinterpret_cast<QPoint *>(obj);
     int  retVal = ptr->manhattanLength();
    return retVal;
}

double QWQPointFmanhattanLength(void * obj)
{
    QPointF * ptr = reinterpret_cast<QPointF *>(obj);
     qreal  retVal = ptr->manhattanLength();
    return retVal;
}

int8_t QWQPointFisNull(void * obj)
{
    QPointF * ptr = reinterpret_cast<QPointF *>(obj);
     bool  retVal = ptr->isNull();
    return retVal;
}

double QWQPointFx(void * obj)
{
    QPointF * ptr = reinterpret_cast<QPointF *>(obj);
     qreal  retVal = ptr->x();
    return retVal;
}

double QWQPointFy(void * obj)
{
    QPointF * ptr = reinterpret_cast<QPointF *>(obj);
     qreal  retVal = ptr->y();
    return retVal;
}

void QWQPointFsetX(void * obj, double  x)
{
    QPointF * ptr = reinterpret_cast<QPointF *>(obj);
    qreal xx = x;
    ptr->setX(xx);
}

void QWQPointFsetY(void * obj, double  y)
{
    QPointF * ptr = reinterpret_cast<QPointF *>(obj);
    qreal xy = y;
    ptr->setY(xy);
}

int32_t QWQRectx(void * obj)
{
    QRect * ptr = reinterpret_cast<QRect *>(obj);
     int  retVal = ptr->x();
    return retVal;
}

int32_t QWQRecty(void * obj)
{
    QRect * ptr = reinterpret_cast<QRect *>(obj);
     int  retVal = ptr->y();
    return retVal;
}

int32_t QWQRectwidth(void * obj)
{
    QRect * ptr = reinterpret_cast<QRect *>(obj);
     int  retVal = ptr->width();
    return retVal;
}

int32_t QWQRectheight(void * obj)
{
    QRect * ptr = reinterpret_cast<QRect *>(obj);
     int  retVal = ptr->height();
    return retVal;
}


